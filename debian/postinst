#!/bin/sh
echo "torcontroller postinst setting script..."
# Place supervisor setting file.
# torcontoller would build tor and privoxy program in supervisord.conf
# Due to user might built their own program,
# if tor or privoxy program existed, backup it and place new setting file.
# ir did NOT exist, just add torcontroller program.
if [ ! -f /etc/supervisor/supervisord.conf ]; then
    cp /tmp/torcontoller/supervisord.conf /etc/supervisor/supervisord.conf
elif ! grep -q "\[program:tor\]" /etc/supervisor/supervisord.conf && ! grep -q "\[program:privoxy\]" /etc/supervisor/supervisord.conf; then
    cat <<EOF >>/etc/supervisor/supervisord.conf
[program:tor]
command=/usr/bin/tor
autostart=true
autorestart=true
redirect_stderr=true
EOF
    cat <<EOF >>/etc/supervisor/supervisord.conf
[program:privoxy]
command=/usr/sbin/privoxy --no-daemon /etc/privoxy/config
autostart=true
autorestart=true
redirect_stderr=true
EOF
else
    cp /etc/supervisor/supervisord.conf /etc/supervisor/supervisord.conf.back
    cp /tmp/torcontroller/supervisord.conf /etc/supervisor/supervisord.conf
fi
# Restart tor and privoxy to read new settings.
# Maybe try supervisor response code in the future.
supervisorResponse=$(supervisorctl status 2>&1)
case "$supervisorResponse" in
*"can't find command"*)
    echo "supervisor not installed properly!" && exit 1
    ;;
*"no such file"*)
    supervisord -c /etc/supervisor/supervisord.conf
    ;;
*"no such process"*)
    supervisorctl reread
    supervisorctl update
    ;;
*)
    echo "Unknown error!" && exit 1
    ;;
esac
# Wait until supervisord is properly started
stateCounter=0
until supervisorctl status >/dev/null 2>&1 || [ $stateCounter -ge 60 ]; do
    echo "Waiting for supervisord to start..."
    sleep 1
    stateCounter=$(($stateCounter + 1))
done
if [ $stateCounter -ge 60 ]; then
    echo "Supervisor failed to start within 60 seconds, exiting."
    exit 1
fi
# Reset counter
stateCounter=0
# Check and start tor / privoxy service should be stopped.
# Maybe try supervisor response code in the future.
while true; do
    torsuperResponse=$(supervisorctl status tor 2>&1)
    case "$torsuperResponse" in
    *"STARTING"*)
        if [ $stateCounter -ge 60 ]; then
            echo "tor failed to start within 60 seconds, exiting."
            exit 1
        fi
        echo "Waiting for tor..."
        sleep 1
        stateCounter=$(($stateCounter + 1))
        continue
        ;;
    *"RUNNING"*)
        supervisorctl stop tor
        break
        ;;
    *"STOPPED"*)
        kill $(pidof tor) || true
        echo "Tor already stopped."
        break
        ;;
    *)
        echo "Unknown tor program status! Response:"
        #print what is wrong.
        echo "$torsuperResponse"
        exit 1
        ;;
    esac
done
# Reset counter
stateCounter=0
while true; do
    privoxysuperResponse=$(supervisorctl status privoxy 2>&1)
    case "$privoxysuperResponse" in
    *"STARTING"*)
        if [ $stateCounter -ge 60 ]; then
            echo "privoxy failed to start within 60 seconds, exiting."
            exit 1
        fi
        echo "Waiting for privoxy..."
        sleep 1
        stateCounter=$(($stateCounter + 1))
        continue
        ;;
    *"RUNNING"*)
        supervisorctl stop privoxy
        break
        ;;
    *"STOPPED"*)
        kill $(pidof privoxy) || true
        echo "privoxy already stopped."
        break
        ;;
    *)
        echo "Unknown privoxy program status!"
        #print what is wrong.
        echo "$privoxysuperResponse"
        exit 1
        ;;
    esac
done
# Place tor and privoxy setting files.
# Backup user tor and privoxy setting before install.
# For new tor and privoxy files still complex,
# torcontroller back up user's origin setting.
if [ -f /etc/tor/torrc ]; then cp /etc/tor/torrc /etc/tor/torrc.back; fi
cp /tmp/torcontroller/torrc /etc/tor/torrc
if [ -f /etc/privoxy/config ]; then cp /etc/privoxy/config /etc/privoxy/config.back; fi
cp /tmp/torcontroller/config /etc/privoxy/config
# set 'torcontroller' as the default tor authentication password.
hashTorPWD=$(tor --hash-password "torcontroller" | tail -n 1)
sed -i "/HashedControlPassword/s/.*/HashedControlPassword $hashTorPWD/" /etc/tor/torrc
unset hashTorPWD
rm -rf /tmp/torcontroller
echo "postinst script finished."
