#!/bin/sh
# If any error, exit.
set -xe

echo "torcontroller postinst setting script..."
# Place systemctl setting file.
# torcontoller would build tor.service and privoxy.service files.
# Due to user might built their own program,
# if tor or privoxy program existed, backup it and place new setting file.
# ir did NOT exist, just add torcontroller program.
if [ -f /etc/systemd/system/privoxy.service ]; then
    cp /etc/systemd/system/privoxy.service /etc/systemd/system/privoxy.service.back
    rm -f /etc/systemd/system/privoxy.service
    cp /usr/src/torcontroller/tmp/privoxy.service /etc/systemd/system/privoxy.service
else
    cp /usr/src/torcontroller/tmp/privoxy.service /etc/systemd/system/privoxy.service
fi
if [ -f /etc/systemd/system/tor.service ]; then
    cp /etc/systemd/system/tor.service /etc/systemd/system/tor.service.back
    rm -f /etc/systemd/system/tor.service
    cp /usr/src/torcontroller/tmp/tor.service /etc/systemd/system/tor.service
else
    cp /usr/src/torcontroller/tmp/tor.service /etc/systemd/system/tor.service
fi
# Check and start tor / privoxy service should be stopped.
# Check tor / privoxy systemd setting.
torResponse=$(systemctl status tor 2>&1)
if [ "$torResponse#*disabled" != "$torResponse" ]; then
    systemctl enable tor || echo "Failed to enable tor" >&2
    systemctl stop tor || echo "Failed to stop tor" >&2
elif [ "$torResponse#*running" != "$torResponse" ]; then
    systemctl stop tor || echo "Failed to stop tor" >&2
elif [ "$torResponse#*dead" != "$torResponse" ]; then
    echo "Tor already stopped."
else
    echo "Unknown tor program status! Response:"
    #print what is wrong.
    echo "$torResponse"
    exit 1
fi
# stateCounter=0
# while true; do
#     torResponse=$(systemctl status tor 2>&1)
#     case $torResponse in
#     *waiting*)
#         if [ $stateCounter -ge 60 ]; then
#             echo "tor failed to start within 60 seconds, exiting."
#             exit 1
#         fi
#         echo "Waiting for tor..."
#         sleep 1
#         stateCounter=$(($stateCounter + 1))
#         continue
#         ;;
#     *disabled*)
#         systemctl enable tor || echo "Failed to enable tor" >&2
#         systemctl stop tor || echo "Failed to stop tor" >&2
#         break
#         ;;
#     *running*)
#         systemctl stop tor || echo "Failed to stop tor" >&2
#         break
#         ;;
#     *dead*)
#         echo "Tor already stopped."
#         break
#         ;;
#     *)
#         echo "Unknown tor program status! Response:"
#         #print what is wrong.
#         echo "$torResponse"
#         exit 1
#         ;;
#     esac
# done
while true; do
    privoxyResponse=$(systemctl status privoxy 2>&1)
    case "$privoxyResponse" in
    *"disabled"*)
        systemctl enable privoxy || echo "Failed to enable privoxy" >&2
        systemctl stop privoxy || echo "Failed to stop privoxy" >&2
        break
        ;;
    *"running"*)
        systemctl stop privoxy
        break
        ;;
    *"dead"*)
        echo "privoxy already stopped."
        break
        ;;
    *)
        echo "Unknown privoxy program status!"
        #print what is wrong.
        echo "$privoxyResponse"
        exit 1
        ;;
    esac
done
# Some container NOT automatically mount /proc at boot.
# Such as pbuilder.
# Mount proc system.
# pidof tor should be kill.
# mount -t proc none /proc &&
#     kill $(pidof tor) &&
#     echo "torcontroller mount /proc at boot" &&
#     echo "Please make sure that this setting would cause any safety issues for your environment." ||
#     true
# Place tor and privoxy setting files.
# Backup user tor and privoxy setting before install.
# For new tor and privoxy files still complex,
# torcontroller back up user's origin setting.
if [ -f /etc/tor/torrc ]; then cp /etc/tor/torrc /etc/tor/torrc.back; fi
cp /usr/src/torcontroller/tmp/torrc /etc/tor/torrc
if [ -f /etc/privoxy/config ]; then cp /etc/privoxy/config /etc/privoxy/config.back; fi
cp /usr/src/torcontroller/tmp/config /etc/privoxy/config
# set 'torcontroller' as the default tor authentication password.
hashTorPWD=$(tor --hash-password "torcontroller" | tail -n 1)
sed -i "/HashedControlPassword/s/.*/HashedControlPassword $hashTorPWD/" /etc/tor/torrc
unset hashTorPWD
rm -rf /usr/src/torcontroller/tmp
echo "postinst script finished."

#DEBHELPLER#
