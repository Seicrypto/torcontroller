#!/bin/sh
echo "torcontroller postinst setting script..."
# Place systemctl setting file.
# torcontoller would build tor.service and privoxy.service files.
# Due to user might built their own program,
# if tor or privoxy program existed, backup it and place new setting file.
# ir did NOT exist, just add torcontroller program.
if [ -f /etc/systemd/system/privoxy.service ]; then
    cp /etc/systemd/system/privoxy.service /etc/systemd/system/privoxy.service.back
    rm -f /etc/systemd/system/privoxy.service
    cp /tmp/torcontroller/privoxy.service /etc/systemd/system/privoxy.service
else
    cp /tmp/torcontroller/privoxy.service /etc/systemd/system/privoxy.service
fi
if [ -f /etc/systemd/system/tor.service ]; then
    cp /etc/systemd/system/tor.service /etc/systemd/system/tor.service.back
    rm -f /etc/systemd/system/tor.service
    cp /tmp/torcontroller/tor.service /etc/systemd/system/tor.service
else
    cp /tmp/torcontroller/tor.service /etc/systemd/system/tor.service
fi
# Check and start tor / privoxy service should be stopped.
# Maybe try supervisor response code in the future.
while true; do
    torResponse=$(systemctl status tor 2>&1)
    echo "log:"
    echo "$torResponse"
    case "$torResponse" in
    *"disable"*)
        systemctl enable tor
        systemctl stop tor
        break
        ;;
    *"running"*)
        systemctl stop tor
        break
        ;;
    *"dead"*)
        kill $(pidof tor) || true
        echo "Tor already stopped."
        break
        ;;
    *)
        echo "Unknown tor program status! Response:"
        #print what is wrong.
        echo "$torResponse"
        exit 1
        ;;
    esac
done
while true; do
    privoxyResponse=$(systemctl status privoxy 2>&1)
    echo "log:"
    echo "$privoxyResponse"
    case "$privoxyResponse" in
    *"disable"*)
        systemctl enable privoxy
        systemctl stop privoxy
        break
        ;;
    *"running"*)
        systemctl stop privoxy
        break
        ;;
    *"STOPPED"*)
        kill $(pidof privoxy) || true
        echo "privoxy already stopped."
        break
        ;;
    *)
        echo "Unknown privoxy program status!"
        #print what is wrong.
        echo "$privoxyResponse"
        exit 1
        ;;
    esac
done
# Place tor and privoxy setting files.
# Backup user tor and privoxy setting before install.
# For new tor and privoxy files still complex,
# torcontroller back up user's origin setting.
if [ -f /etc/tor/torrc ]; then cp /etc/tor/torrc /etc/tor/torrc.back; fi
cp /tmp/torcontroller/torrc /etc/tor/torrc
if [ -f /etc/privoxy/config ]; then cp /etc/privoxy/config /etc/privoxy/config.back; fi
cp /tmp/torcontroller/config /etc/privoxy/config
# set 'torcontroller' as the default tor authentication password.
hashTorPWD=$(tor --hash-password "torcontroller" | tail -n 1)
sed -i "/HashedControlPassword/s/.*/HashedControlPassword $hashTorPWD/" /etc/tor/torrc
unset hashTorPWD
rm -rf /tmp/torcontroller
echo "postinst script finished."
